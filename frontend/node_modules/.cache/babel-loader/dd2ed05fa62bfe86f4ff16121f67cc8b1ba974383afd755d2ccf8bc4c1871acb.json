{"ast":null,"code":"var _jsxFileName = \"/home/moda/Documents/nest/frontend/src/App.tsx\";\nimport React from 'react';\nimport { GoogleLogin } from 'react-google-login';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  const handleLoginSuccess = async response => {\n    if ('tokenId' in response) {\n      const {\n        tokenId\n      } = response;\n      try {\n        const res = await axios.post('http://localhost:3000/authentication/google', {\n          token: tokenId\n        });\n        console.log('Login successful:', res.data);\n      } catch (error) {\n        console.error('Login failed:', error);\n      }\n    }\n  };\n  const handleLoginFailure = response => {\n    if (response.error === 'popup_closed_by_user') {\n      console.error('Login failed: The popup was closed before completing the sign-in.');\n    } else {\n      console.error('Login failed:', response);\n    }\n  };\n  const onLoginSuccess = res => {\n    if (res) {\n      // Sometime `res.accessToken` is undefined\n      // saveUserToken(res.getAuthResponse(true).access_token);  <-- save token\n\n      refreshTokenSetup(res);\n    }\n  };\n\n  /**\n   * The setup for refreshing token automatically\n   *\n   * @param res GoogleLoginResponse\n   */\n  const refreshTokenSetup = res => {\n    // Timing to renew access token\n    let refreshTiming = (res.tokenObj.expires_in || 3600 - 5 * 60) * 1000;\n    const refreshToken = async () => {\n      const newAuthRes = await res.reloadAuthResponse();\n      refreshTiming = (newAuthRes.expires_in || 3600 - 5 * 60) * 1000;\n\n      // saveUserToken(newAuthRes.access_token);  <-- save new token\n\n      // Setup the other timer after the first one\n      setTimeout(refreshToken, refreshTiming);\n    };\n\n    // Setup first refresh timer\n    setTimeout(refreshToken, refreshTiming);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Google Authentication\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GoogleLogin, {\n      clientId: \"1079032050078-rvjpv3dikni78v74nkvn78eingk5sp1u.apps.googleusercontent.com\",\n      buttonText: \"Login with Google\",\n      onSuccess: handleLoginSuccess,\n      onFailure: handleLoginFailure,\n      cookiePolicy: 'single_host_origin'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n};\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","GoogleLogin","axios","jsxDEV","_jsxDEV","App","handleLoginSuccess","response","tokenId","res","post","token","console","log","data","error","handleLoginFailure","onLoginSuccess","refreshTokenSetup","refreshTiming","tokenObj","expires_in","refreshToken","newAuthRes","reloadAuthResponse","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","clientId","buttonText","onSuccess","onFailure","cookiePolicy","_c","$RefreshReg$"],"sources":["/home/moda/Documents/nest/frontend/src/App.tsx"],"sourcesContent":["import React from 'react';\nimport {\n    GoogleLogin,\n    GoogleLoginResponse,\n    GoogleLoginResponseOffline,\n} from 'react-google-login';\nimport axios from 'axios';\n\nconst App: React.FC = () => {\n    const handleLoginSuccess = async (\n        response: GoogleLoginResponse | GoogleLoginResponseOffline\n    ) => {\n        if ('tokenId' in response) {\n            const { tokenId } = response;\n            try {\n                const res = await axios.post(\n                    'http://localhost:3000/authentication/google',\n                    { token: tokenId }\n                );\n                console.log('Login successful:', res.data);\n            } catch (error) {\n                console.error('Login failed:', error);\n            }\n        }\n    };\n\n    const handleLoginFailure = (response: any) => {\n        if (response.error === 'popup_closed_by_user') {\n            console.error(\n                'Login failed: The popup was closed before completing the sign-in.'\n            );\n        } else {\n            console.error('Login failed:', response);\n        }\n    };\n\n    const onLoginSuccess = res => {\n  if (res) {\n    // Sometime `res.accessToken` is undefined\n    // saveUserToken(res.getAuthResponse(true).access_token);  <-- save token\n\n    refreshTokenSetup(res);\n  }\n};\n\n/**\n * The setup for refreshing token automatically\n *\n * @param res GoogleLoginResponse\n */\nconst refreshTokenSetup = res => {\n  // Timing to renew access token\n  let refreshTiming = (res.tokenObj.expires_in || 3600  - 5 * 60) * 1000;\n\n  const refreshToken = async () => {\n    const newAuthRes = await res.reloadAuthResponse();\n    refreshTiming = (newAuthRes.expires_in || 3600  - 5 * 60) * 1000;\n\n    // saveUserToken(newAuthRes.access_token);  <-- save new token\n\n    // Setup the other timer after the first one\n    setTimeout(refreshToken, refreshTiming);\n  };\n\n  // Setup first refresh timer\n  setTimeout(refreshToken, refreshTiming);\n};\n\n    return (\n        <div className='App'>\n            <h1>Google Authentication</h1>\n            <GoogleLogin\n                clientId='1079032050078-rvjpv3dikni78v74nkvn78eingk5sp1u.apps.googleusercontent.com'\n                buttonText='Login with Google'\n                onSuccess={handleLoginSuccess}\n                onFailure={handleLoginFailure}\n                cookiePolicy={'single_host_origin'}\n            />\n        </div>\n    );\n};\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SACIC,WAAW,QAGR,oBAAoB;AAC3B,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,GAAa,GAAGA,CAAA,KAAM;EACxB,MAAMC,kBAAkB,GAAG,MACvBC,QAA0D,IACzD;IACD,IAAI,SAAS,IAAIA,QAAQ,EAAE;MACvB,MAAM;QAAEC;MAAQ,CAAC,GAAGD,QAAQ;MAC5B,IAAI;QACA,MAAME,GAAG,GAAG,MAAMP,KAAK,CAACQ,IAAI,CACxB,6CAA6C,EAC7C;UAAEC,KAAK,EAAEH;QAAQ,CACrB,CAAC;QACDI,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEJ,GAAG,CAACK,IAAI,CAAC;MAC9C,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZH,OAAO,CAACG,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACzC;IACJ;EACJ,CAAC;EAED,MAAMC,kBAAkB,GAAIT,QAAa,IAAK;IAC1C,IAAIA,QAAQ,CAACQ,KAAK,KAAK,sBAAsB,EAAE;MAC3CH,OAAO,CAACG,KAAK,CACT,mEACJ,CAAC;IACL,CAAC,MAAM;MACHH,OAAO,CAACG,KAAK,CAAC,eAAe,EAAER,QAAQ,CAAC;IAC5C;EACJ,CAAC;EAED,MAAMU,cAAc,GAAGR,GAAG,IAAI;IAChC,IAAIA,GAAG,EAAE;MACP;MACA;;MAEAS,iBAAiB,CAACT,GAAG,CAAC;IACxB;EACF,CAAC;;EAED;AACA;AACA;AACA;AACA;EACA,MAAMS,iBAAiB,GAAGT,GAAG,IAAI;IAC/B;IACA,IAAIU,aAAa,GAAG,CAACV,GAAG,CAACW,QAAQ,CAACC,UAAU,IAAI,IAAI,GAAI,CAAC,GAAG,EAAE,IAAI,IAAI;IAEtE,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,MAAMC,UAAU,GAAG,MAAMd,GAAG,CAACe,kBAAkB,CAAC,CAAC;MACjDL,aAAa,GAAG,CAACI,UAAU,CAACF,UAAU,IAAI,IAAI,GAAI,CAAC,GAAG,EAAE,IAAI,IAAI;;MAEhE;;MAEA;MACAI,UAAU,CAACH,YAAY,EAAEH,aAAa,CAAC;IACzC,CAAC;;IAED;IACAM,UAAU,CAACH,YAAY,EAAEH,aAAa,CAAC;EACzC,CAAC;EAEG,oBACIf,OAAA;IAAKsB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAChBvB,OAAA;MAAAuB,QAAA,EAAI;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC9B3B,OAAA,CAACH,WAAW;MACR+B,QAAQ,EAAC,2EAA2E;MACpFC,UAAU,EAAC,mBAAmB;MAC9BC,SAAS,EAAE5B,kBAAmB;MAC9B6B,SAAS,EAAEnB,kBAAmB;MAC9BoB,YAAY,EAAE;IAAqB;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACM,EAAA,GAxEIhC,GAAa;AA0EnB,eAAeA,GAAG;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}